from magma import *
from mantle import *

from loam.parts.xilinx.spartan3 import XC3S250E
from loam.parts.xilinx.spartan6 import XC6SLX9
from loam.parts.generic.crystal import Crystal
from loam.parts.ftdi.ft232r import FT232R
from loam.peripherals.timer import Timer
from loam import Board


class _Papilio(Board):
    def __init__(self, name):
        super(_Papilio,self).__init__(name)

#
# UCF file for the Papilio One board
# Generated by pin_converter, written by Kevin Lindsey
# https://github.com/thelonious/papilio_pins/tree/development/pin_converter

# Main board wing pin [] to FPGA pin Pxx map
# -------C-------    -------B-------    -------A-------
# [GND] [C00] P91    [GND] [B00] P85    P86 [A15]
# [2V5] [C01] P92    [2V5] [B01] P83    P84 [A14]
# [3V3] [C02] P94    [3V3] [B02] P78    P79 [A13]
# [5V0] [C03] P95    [5V0] [B03] P71    P70 [A12]
#       [C04] P98          [B04] P68    P67 [A11] [5V0]
#       [C05] P2           [B05] P66    P65 [A10] [3V3]
#       [C06] P3           [B06] P63    P62 [A09] [2V5]
#       [C07] P4           [B07] P61    P60 [A08] [GND]
# [GND] [C08] P5     [GND] [B08] P58    P57 [A07]
# [2V5] [C09] P9     [2V5] [B09] P54    P53 [A06]
# [3V3] [C10] P10    [3V3] [B10] P41    P40 [A05]
# [5V0] [C11] P11    [5V0] [B11] P36    P35 [A04]
#       [C12] P12          [B12] P34    P33 [A03] [5V0]
#       [C13] P15          [B13] P32    P26 [A02] [3V3]
#       [C14] P16          [B14] P25    P23 [A01] [2V5]
#       [C15] P17          [B15] P22    P18 [A00] [GND]
#
class PapilioOne(_Papilio):

    def __init__(self, fpga=XC3S250E):
        super(PapilioOne,self).__init__("PapilioOne")

        # Need to define the interface ...

        self.fpga = fpga = fpga(board=self)

        self.A = [fpga.P18, fpga.P23, fpga.P26, fpga.P33, 
                  fpga.P35, fpga.P40, fpga.P53, fpga.P57,
                  fpga.P60, fpga.P62, fpga.P65, fpga.P67, 
                  fpga.P70, fpga.P79, fpga.P84, fpga.P86]

        self.B = [fpga.P85, fpga.P83, fpga.P78, fpga.P71, 
                  fpga.P68, fpga.P66, fpga.P63, fpga.P61,
                  fpga.P58, fpga.P54, fpga.P41, fpga.P36, 
                  fpga.P34, fpga.P32, fpga.P25, fpga.P22]

        self.C = [fpga.P91, fpga.P92, fpga.P94, fpga.P95, 
                  fpga.P98, fpga.P2,  fpga.P3,  fpga.P4,
                  fpga.P5,  fpga.P9,  fpga.P10, fpga.P11,
                  fpga.P12, fpga.P15, fpga.P16, fpga.P17]

        # Clock setup
        self.CLKIN = fpga.P89
        self.CLKIN.rename('CLKIN')

        #print('wiring crystal')
        self.Crystal = Crystal(32000000, board=self)
        wire(self.Crystal.O, self.CLKIN.I)

        #print('wiring clock')
        self.Clock = fpga.clock
        wire(self.CLKIN.O, self.Clock.I)


        # Timer peripheral setup
        #print('wiring timer')
        self.Timer = Timer(fpga, name='systimer')


        # USART setup
        self.RX = fpga.P88
        self.RX.rename('RX').input()

        self.TX = fpga.P90
        self.TX.rename('TX').output()

        #print('wiring uart')
        self.usart = FT232R(board=self)
        wire(self.TX, self.usart.RX)
        wire(self.usart.TX, self.RX)

        self.usart0 = fpga.USART(fpga)
        self.usart.peripheral(self.usart0)
        wire(self.usart0.TX, self.TX)
        wire(self.RX, self.usart0.RX)


        # Flash setup
        #self.CS   = fpga.P24
        #self.SCLK = fpga.P50
        #self.MOSI = fpga.P27
        #self.MISO = fpga.P44

        #self.Flash = Flash(self)
        #self.SCLK.rename('SCLK').output()
        #self.MOSI.rename('MOSI').output()
        #self.MISO.rename('MISO').output()
        #self.CS.  rename('CS')  .output()
        #wire(self.SCLK, self.Flash.SCLK)
        #wire(self.MOSI, self.Flash.MOSI)
        #wire(self.Flash.MISO, self.MISO)
        #wire(self.CS, self.Flash.CS)


def sdram(self):
        #sdram_addr0...12
        sdram_addr_pins = ["P140", "P139", "P138", "P137",
                           "P46", "P45", "P44", "P43",
                           "P41", "P40", "P141", "P35", 
                           "P34"]
        self.SDRAM_ADDR = []
        for p in sdram_addr_pins:
            self.SDRAM_ADDR.append(getattr(fpga, p))

        #sdram_data0...15
        sdram_data_pins = ["P9", "P10", "P11", "P12",
                           "P14", "P15", "P16", "P8",
                           "P21", "P22", "P23", "P24",
                           "P26", "P27", "P29", "P30"]
        self.SDRAM_DATA = []
        for p in sdram_data_pins:
            self.SDRAM_DATA.append(getattr(fpga, p))

        #sdram_dq0..1
        self.SDRAM_DQML = fpga.P7
        self.SDRAM_DQMH = fpga.P17

        #sdram_ba0..1
        self.SDRAM_BA = [fpga.P143, fpga.P142]

        #sdram_nWE/CAS/RAS
        self.SDRAM_WE = fpga.P6
        self.SDRAM_CAS = fpga.P5
        self.SDRAM_RAS = fpga.P2

        #sdram_cs/clk/cle
        self.SDRAM_CS = fpga.P1
        self.SDRAM_CLK = fpga.P32
        self.SDRAM_CKE = fpga.P33

        self.SDRAM = SDRAM(self)

        # setup sdram part
        for i in range(len(self.SDRAM_ADDR)):
            self.SDRAM_ADDR[i].rename("SDRAM_ADDR[%d]" % i).output()
            wire(self.SDRAM_ADDR[i], self.SDRAM.ADDR[i])

        for i in range(len(self.SDRAM_DATA)):
            self.SDRAM_DATA[i].rename("SDRAM_DATA[%d]" % i).inputoutput()
            wire(self.SDRAM_DATA[i], self.SDRAM.DATA[i])

        self.SDRAM_DQML.rename("SDRAM_DQML").output()
        wire(self.SDRAM_DQML, self.SDRAM.DQML)
        self.SDRAM_DQMH.rename("SDRAM_DQMH").output()
        wire(self.SDRAM_DQMH, self.SDRAM.DQMH)

        self.SDRAM_BA[0].rename("SDRAM_BA[0]").output()
        self.SDRAM_BA[1].rename("SDRAM_BA[1]").output()
        wire(self.SDRAM_BA[0], self.SDRAM.BA[0])
        wire(self.SDRAM_BA[1], self.SDRAM.BA[1])

        self.SDRAM_WE.rename("SDRAM_WE").output()
        self.SDRAM_CAS.rename("SDRAM_CAS").output()
        self.SDRAM_RAS.rename("SDRAM_RAS").output()
        wire(self.SDRAM_WE, self.SDRAM.WE)
        wire(self.SDRAM_CAS, self.SDRAM.CAS)
        wire(self.SDRAM_RAS, self.SDRAM.RAS)

        self.SDRAM_CS.rename("SDRAM_CS").output()
        self.SDRAM_CLK.rename("SDRAM_CLK").output()
        self.SDRAM_CKE.rename("SDRAM_CKE").output()
        wire(self.SDRAM_CS, self.SDRAM.CS)
        wire(self.SDRAM_CLK, self.SDRAM.CLK)
        wire(self.SDRAM_CKE, self.SDRAM.CKE)

#
# UCF file for the Papilio Pro board
# Generated by pin_converter, written by Kevin Lindsey
# https://github.com/thelonious/papilio_pins/tree/development/pin_converter

# Main board wing pin [] to FPGA pin Pxx map
# -------C-------    -------B-------    -------A-------
# [GND] [C00] P114   [GND] [B00] P99    P100 [A15]
# [2V5] [C01] P115   [2V5] [B01] P97    P98 [A14]
# [3V3] [C02] P116   [3V3] [B02] P92    P93 [A13]
# [5V0] [C03] P117   [5V0] [B03] P87    P88 [A12]
#       [C04] P118         [B04] P84    P85 [A11] [5V0]
#       [C05] P119         [B05] P82    P83 [A10] [3V3]
#       [C06] P120         [B06] P80    P81 [A09] [2V5]
#       [C07] P121         [B07] P78    P79 [A08] [GND]
# [GND] [C08] P123   [GND] [B08] P74    P75 [A07]
# [2V5] [C09] P124   [2V5] [B09] P95    P67 [A06]
# [3V3] [C10] P126   [3V3] [B10] P62    P66 [A05]
# [5V0] [C11] P127   [5V0] [B11] P59    P61 [A04]
#       [C12] P131         [B12] P57    P58 [A03] [5V0]
#       [C13] P132         [B13] P55    P56 [A02] [3V3]
#       [C14] P133         [B14] P50    P51 [A01] [2V5]
#       [C15] P134         [B15] P47    P48 [A00] [GND]
#
class PapilioPro(_Papilio):

    def __init__(self, fpga = XC6SLX9):
        super(PapilioPro,self).__init__("PapilioPro")

        # Need to define the interface ...

        self.fpga = fpga = fpga(board=self)

        self.A = [fpga.P48, fpga.P51, fpga.P56, fpga.P58, 
                  fpga.P61, fpga.P66, fpga.P67, fpga.P75,
                  fpga.P79, fpga.P81, fpga.P83, fpga.P85, 
                  fpga.P88, fpga.P93, fpga.P98, fpga.P100]

        self.B = [fpga.P99, fpga.P97, fpga.P92, fpga.P87, 
                  fpga.P84, fpga.P82, fpga.P80, fpga.P78,
                  fpga.P74, fpga.P95, fpga.P62, fpga.P59, 
                  fpga.P57, fpga.P55, fpga.P50, fpga.P47]

        self.C = [fpga.P114, fpga.P115, fpga.P116, fpga.P117, 
                  fpga.P118, fpga.P119, fpga.P120, fpga.P121,
                  fpga.P123, fpga.P124, fpga.P126, fpga.P127, 
                  fpga.P131, fpga.P132, fpga.P133, fpga.P134]


        # Clock setup
        self.CLKIN = fpga.P94
        self.CLKIN.rename('CLKIN')

        self.Crystal = Crystal(32000000, board=self)
        wire(self.Crystal.O, self.CLKIN.I)

        self.Clock = fpga.clock
        wire(self.CLKIN.O, self.Clock.I)


        # Timer setup
        self.Timer = Timer(fpga, name='systimer')


        # led1
        self.LED1 = fpga.P112

        # usart setup
        self.RX = fpga.P101
        self.RX.rename('RX').input()

        self.TX = fpga.P105
        self.TX.rename('TX').output()

        self.usart = FT232R(board=self)
        wire(self.TX, self.usart.RX)
        wire(self.usart.TX, self.RX)

        self.usart0 = fpga.USART(fpga)
        self.usart.peripheral(self.usart0)
        wire(self.usart0.TX, self.TX)
        wire(self.RX, self.usart0.RX)

        # jtag
        #self.JTAG_TMS = fpga.P107
        #self.JTAG_TCK = fpga.P109
        #self.JTAG_TDI = fpga.P110
        #self.JTAG_TDO = fpga.P106

        # flash
        #self.FLASH_CS = fpga.P38
        #self.FLASH_CK = fpga.P70
        #self.FLASH_SI = fpga.P64
        #self.FLASH_SO = fpga.P65

        #self.Flash = Flash(self)
        #self.SCLK.rename('SCLK').output()
        #self.MOSI.rename('MOSI').output()
        #self.MISO.rename('MISO').output()
        #self.CS.  rename('CS')  .output()
        #wire(self.SCLK, self.Flash.SCLK)
        #wire(self.MOSI, self.Flash.MOSI)
        #wire(self.Flash.MISO, self.MISO)
        #wire(self.CS, self.Flash.CS)

        # sdram(self)

def Papilio():
    target = os.getenv('MANTLE_TARGET','spartan3')
    if   target == 'spartan3':
        return PapilioOne()
    elif target == 'spartan6':
        return PapilioPro()
    return None
